{"version":3,"file":"static/js/132.761faf13.chunk.js","mappings":"gPA+CA,EA5Cc,SAAH,GAAwD,IAAlDA,EAAO,EAAPA,QAASC,EAAQ,EAARA,SAAUC,EAAO,EAAPA,QAASC,EAAI,EAAJA,KAASC,GAAK,YACjDC,GAAUC,EAAAA,EAAAA,IAAc,CAC9BJ,QAAAA,EACAC,KAAAA,EACAI,aAAc,KAHRF,MAKR,OACE,8BACE,kCACEL,QAASA,EACTQ,KAAK,QACLC,UAAU,gBACNJ,GACAD,KAEN,iBAAKK,UAAU,uDAAsD,WACnE,gBACEA,UAAS,4EACPT,EACI,uCACA,6CACH,UAEH,gBACEU,MAAM,6BACND,UAAU,UACVE,KAAK,OACLC,QAAQ,YACRC,OAAO,eACPC,YAAY,IAAG,UAEf,iBACEC,cAAc,QACdC,eAAe,QACfC,EAAE,wBAIR,0BAAOhB,SAIf,C,0PC2MA,UAtOmB,WACjB,IAAQiB,GAAaC,EAAAA,EAAAA,KAAbD,SACR,GAQIE,EAAAA,EAAAA,IAAQ,CACVC,KAAM,WACNC,cAAe,CACbC,SAAU,GACVC,OAAQ,GACRC,MAAO,GACPC,SAAU,GACVC,UAAW,IAAIC,KACfC,OAAQC,EAAAA,GAAAA,OACRC,KAAMC,EAAAA,GAAAA,QAhBR9B,EAAO,EAAPA,QACA+B,EAAK,EAALA,MACAC,EAAS,EAATA,UACAC,EAAQ,EAARA,SACAC,EAAK,EAALA,MACAC,EAAY,EAAZA,aAAa,EAAD,EACZC,UAAaC,EAAY,EAAZA,aAaTC,GAb6B,EAANC,OAaLC,OAAON,EAAM,YAC/BO,EAAgBD,OAAON,EAAM,SACnC,GAMIQ,EAAAA,EAAAA,GAAiBT,EAAUD,GAL7BW,EAAQ,EAARA,SACAC,EAAQ,EAARA,SACAC,EAA4B,EAA5BA,6BACAC,EAAiB,EAAjBA,kBACAC,EAAiB,EAAjBA,kBAEIC,EAAmB,yCAAG,WAAOC,GAAM,sEACvCC,IAAAA,KAAU,CACRC,MAAO,6CACPC,KAAK,0BAAD,OACaH,EAAO5B,SAAQ,8CACT4B,EAAO1B,MAAK,wCAClB0B,EAAOzB,SAAQ,sCACjByB,EAAOtB,OAAM,oCACfsB,EAAOpB,KAAI,kBAExBwB,KAAM,WACNC,mBAAmB,EACnBC,kBAAmB,UACnBC,mBAAoB,UACpBC,kBAAkB,EAClBC,kBAAmB,OACnBC,iBAAkB,gBACjBC,KAAI,yCAAC,WAAOC,GAAM,gFACfA,EAAOC,YAAY,CAAD,0CAECC,EAAAA,EAAAA,IACjBC,EAAAA,EACAf,EAAO1B,MACP0B,EAAOzB,UACP,KAAD,EAJS,OAAJyC,EAAI,iBAKJC,EAAAA,EAAAA,IAAcF,EAAAA,EAAAA,YAAkB,CACpCG,YAAalB,EAAO5B,SACpB+C,SAAS,sDAAD,OAAwDnB,EAAO5B,YACtE,KAAD,mBACIgD,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,SAAU,CACpClD,SAAU4B,EAAO5B,SACjBC,OAAO,sDAAD,OAAwD2B,EAAO5B,UACrEE,MAAO0B,EAAO1B,MACdC,SAAUyB,EAAOzB,SACjBC,WAAW+C,EAAAA,EAAAA,MACX7C,OAAQa,OAAOS,EAAOtB,QACtBE,KAAMW,OAAOS,EAAOpB,MACpB4C,OAAQR,EAAKA,KAAKS,IAClBC,aAAcC,IAAQ3B,EAAO5B,SAAU,CAAEwD,OAAO,MAC/C,KAAD,EACF9C,EAAM,CACJV,SAAU,GACVC,OAAQ,GACRC,MAAO,GACPC,SAAU,GACVC,UAAW,IAAIC,KACfC,OAAQC,EAAAA,GAAAA,OACRC,KAAMC,EAAAA,GAAAA,OAERoB,IAAAA,KAAU,CACRG,KAAM,UACNyB,UAAW,UACX3B,MAAO,4BACP4B,MAAO,KACPzB,mBAAmB,IAClB,kDAEH0B,EAAAA,GAAAA,MAAY,4BAA6B,CACvCC,UAAW,OAEbC,QAAQC,IAAI,EAAD,IAAM,gCAEVtB,EAAOuB,UAAYlC,IAAAA,cAAAA,QAC5BA,IAAAA,KAAU,CACRG,KAAM,UACNyB,UAAW,UACX3B,MAAO,uCACP4B,MAAO,KACPzB,mBAAmB,IAEtB,0DACF,mDAtDM,IAuDPT,IAA+B,2CAChC,gBAzEwB,sCA0EzB,OAAY,OAAR7B,QAAQ,IAARA,OAAQ,EAARA,EAAUa,QAASC,EAAAA,GAAAA,QAA0B,OAARd,QAAQ,IAARA,OAAQ,EAARA,EAAUa,QAASC,EAAAA,GAAAA,IACnD,MAEP,4BACE,SAAC,IAAgB,CACfqB,MAAM,WACNkC,KAAK,4BAEP,kBAAMC,SAAUnD,EAAaa,GAAqB,WAChD,gBAAKzC,UAAU,iDAAgD,UAC7D,SAAC,IAAW,CACVN,KAAK,QACLM,UAAU,sBACVgF,SAAUxC,EACVD,kBAAmBA,EACnB0C,YAAY,EACZC,mBAAmB,EACnB9C,SAAUA,EACVC,SAAUA,OAGd,gBAAKrC,UAAU,cAAa,UAC1B,UAAC,IAAK,YACJ,SAAC,KAAK,wBACN,SAAC,EAAAmF,EAAK,CACJzF,KAAK,WACL0F,YAAY,sBACZ3F,QAASA,UAIf,iBAAKO,UAAU,cAAa,WAC1B,UAAC,IAAK,YACJ,SAAC,KAAK,qBACN,SAAC,EAAAmF,EAAK,CACJzF,KAAK,QACL0F,YAAY,2BACZ3F,QAASA,EACTM,KAAK,cAGT,UAAC,IAAK,YACJ,SAAC,KAAK,wBACN,SAAC,IAAa,CACZL,KAAK,WACL0F,YAAY,sBACZ3F,QAASA,EACTM,KAAK,oBAIX,iBAAKC,UAAU,cAAa,WAC1B,UAAC,IAAK,YACJ,SAAC,KAAK,sBACN,UAAC,IAAa,YACZ,SAAC,IAAK,CACJN,KAAK,SACLD,QAASA,EACTF,QAASwC,IAAoBV,EAAAA,GAAAA,OAC7BgE,MAAOhE,EAAAA,GAAAA,OAAkB,qBAI3B,SAAC,IAAK,CACJ3B,KAAK,SACLD,QAASA,EACTF,QAASwC,IAAoBV,EAAAA,GAAAA,QAC7BgE,MAAOhE,EAAAA,GAAAA,QAAmB,sBAI5B,SAAC,IAAK,CACJ3B,KAAK,SACLD,QAASA,EACTF,QAASwC,IAAoBV,EAAAA,GAAAA,OAC7BgE,MAAOhE,EAAAA,GAAAA,OAAkB,2BAM/B,UAAC,IAAK,YACJ,SAAC,KAAK,oBACN,UAAC,IAAa,YACZ,SAAC,IAAK,CACJ3B,KAAK,OACLD,QAASA,EACTF,QAAS2C,IAAkBX,EAAAA,GAAAA,MAC3B8D,MAAO9D,EAAAA,GAAAA,MAAe,oBAIxB,SAAC,IAAK,CACJ7B,KAAK,OACLD,QAASA,EACTF,QAAS2C,IAAkBX,EAAAA,GAAAA,IAC3B8D,MAAO9D,EAAAA,GAAAA,IAAa,wBAItB,SAAC,IAAK,CACJ7B,KAAK,OACLD,QAASA,EACTF,QAAS2C,IAAkBX,EAAAA,GAAAA,KAC3B8D,MAAO9D,EAAAA,GAAAA,KAAc,4BAO7B,SAAC,IAAM,CACL+D,KAAK,UACLvF,KAAK,SACLwF,UAAWzD,EACX0D,SAAU1D,EACV9B,UAAU,oBAAmB,+BAOvC,C","sources":["components/Radio/Radio.js","module/User/UserAddNew.js"],"sourcesContent":["import React from \"react\";\r\nimport { useController } from \"react-hook-form\";\r\n\r\nconst Radio = ({ checked, children, control, name, ...props }) => {\r\n  const { field } = useController({\r\n    control,\r\n    name,\r\n    defaultValue: \"\",\r\n  });\r\n  return (\r\n    <label>\r\n      <input\r\n        checked={checked}\r\n        type=\"radio\"\r\n        className=\"hidden-input\"\r\n        {...field}\r\n        {...props}\r\n      />\r\n      <div className=\"flex items-center font-medium cursor-pointer gap-x-3\">\r\n        <div\r\n          className={`w-7 h-7 rounded-full border flex items-center justify-center p-1  ${\r\n            checked\r\n              ? \"bg-primary border-primary text-white\"\r\n              : \"border-gray-300 border-2 text-transparent\"\r\n          }`}\r\n        >\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"w-6 h-6\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              d=\"M5 13l4 4L19 7\"\r\n            />\r\n          </svg>\r\n        </div>\r\n        <span>{children}</span>\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Radio;\r\n","import { Button } from \"components/Button\";\r\nimport { Field, FieldCheckbox } from \"components/Field\";\r\nimport { Input, InputPassword } from \"components/Input\";\r\nimport { Label } from \"components/Label\";\r\nimport { Radio } from \"components/Radio\";\r\nimport { ImageUpload } from \"components/Upload\";\r\nimport { useAuth } from \"contexts/auth-context\";\r\nimport { auth, db } from \"firebase-app/firebase-config\";\r\nimport { createUserWithEmailAndPassword, updateProfile } from \"firebase/auth\";\r\nimport { addDoc, collection, serverTimestamp } from \"firebase/firestore\";\r\nimport useFirebaseImage from \"hooks/useFirebaseImage\";\r\nimport DashboardHeading from \"module/Category/DashboardHeading\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"react-toastify\";\r\nimport slugify from \"slugify\";\r\nimport Swal from \"sweetalert2\";\r\nimport { userRole, userStatus } from \"utils/constants\";\r\n\r\nconst UserAddNew = () => {\r\n  const { userInfo } = useAuth();\r\n  const {\r\n    control,\r\n    reset,\r\n    getValues,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { isSubmitting, errors },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n    defaultValues: {\r\n      username: \"\",\r\n      avatar: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      createdAt: new Date(),\r\n      status: userStatus.ACTIVE,\r\n      role: userRole.USER,\r\n    },\r\n  });\r\n  const watchUserStatus = Number(watch(\"status\"));\r\n  const watchUserRole = Number(watch(\"role\"));\r\n  const {\r\n    imageURL,\r\n    progress,\r\n    handleResetUploadAfterSubmit,\r\n    handleRemoveImage,\r\n    handleSelectImage,\r\n  } = useFirebaseImage(setValue, getValues);\r\n  const handleCreateNewUser = async (values) => {\r\n    Swal.fire({\r\n      title: \"Are you sure you want to create this user?\",\r\n      html: `\r\n      <div>Username: ${values.username}</div>\r\n      <div>E-mail address: ${values.email}</div>\r\n      <div>Password: ${values.password}</div>\r\n      <div>Status: ${values.status}</div>\r\n      <div>Role: ${values.role}</div>\r\n      `,\r\n      icon: \"question\",\r\n      showConfirmButton: true,\r\n      confirmButtonText: \"Confirm\",\r\n      confirmButtonColor: \"#1DC071\",\r\n      showCancelButton: true,\r\n      cancelButtonColor: \"#d33\",\r\n      cancelButtonText: \"No, cancel!\",\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        try {\r\n          const user = await createUserWithEmailAndPassword(\r\n            auth,\r\n            values.email,\r\n            values.password\r\n          );\r\n          await updateProfile(auth.currentUser, {\r\n            displayName: values.username,\r\n            photoURL: `https://ui-avatars.com/api/?background=random&name=${values.username}`,\r\n          });\r\n          await addDoc(collection(db, \"users\"), {\r\n            username: values.username,\r\n            avatar: `https://ui-avatars.com/api/?background=random&name=${values.username}`,\r\n            email: values.email,\r\n            password: values.password,\r\n            createdAt: serverTimestamp(),\r\n            status: Number(values.status),\r\n            role: Number(values.role),\r\n            userId: user.user.uid,\r\n            usernameSlug: slugify(values.username, { lower: true }),\r\n          });\r\n          reset({\r\n            username: \"\",\r\n            avatar: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            createdAt: new Date(),\r\n            status: userStatus.ACTIVE,\r\n            role: userRole.USER,\r\n          });\r\n          Swal.fire({\r\n            icon: \"success\",\r\n            iconColor: \"#1DC071\",\r\n            title: \"Created user successfully\",\r\n            timer: 1500,\r\n            showConfirmButton: false,\r\n          });\r\n        } catch (err) {\r\n          toast.error(\"Failed to create new user\", {\r\n            autoClose: 1500,\r\n          });\r\n          console.log(err);\r\n        }\r\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          iconColor: \"#1DC071\",\r\n          title: \"Cancelled creating user successfully\",\r\n          timer: 1500,\r\n          showConfirmButton: false,\r\n        });\r\n      }\r\n    });\r\n    handleResetUploadAfterSubmit();\r\n  };\r\n  if (userInfo?.role !== userRole.ADMIN && userInfo?.role !== userRole.MOD)\r\n    return null;\r\n  return (\r\n    <div>\r\n      <DashboardHeading\r\n        title=\"New user\"\r\n        desc=\"Add new user to system\"\r\n      ></DashboardHeading>\r\n      <form onSubmit={handleSubmit(handleCreateNewUser)}>\r\n        <div className=\"w-[250px] h-[250px] mx-auto rounded-full mb-10\">\r\n          <ImageUpload\r\n            name=\"image\"\r\n            className=\"h-full rounded-full\"\r\n            onChange={handleSelectImage}\r\n            handleRemoveImage={handleRemoveImage}\r\n            scrollable={false}\r\n            centeredCloseIcon={true}\r\n            imageURL={imageURL}\r\n            progress={progress}\r\n          ></ImageUpload>\r\n        </div>\r\n        <div className=\"form-layout\">\r\n          <Field>\r\n            <Label>Username</Label>\r\n            <Input\r\n              name=\"username\"\r\n              placeholder=\"Enter your username\"\r\n              control={control}\r\n            ></Input>\r\n          </Field>\r\n        </div>\r\n        <div className=\"form-layout\">\r\n          <Field>\r\n            <Label>Email</Label>\r\n            <Input\r\n              name=\"email\"\r\n              placeholder=\"Enter your email address\"\r\n              control={control}\r\n              type=\"email\"\r\n            ></Input>\r\n          </Field>\r\n          <Field>\r\n            <Label>Password</Label>\r\n            <InputPassword\r\n              name=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              control={control}\r\n              type=\"password\"\r\n            ></InputPassword>\r\n          </Field>\r\n        </div>\r\n        <div className=\"form-layout\">\r\n          <Field>\r\n            <Label>Status</Label>\r\n            <FieldCheckbox>\r\n              <Radio\r\n                name=\"status\"\r\n                control={control}\r\n                checked={watchUserStatus === userStatus.ACTIVE}\r\n                value={userStatus.ACTIVE}\r\n              >\r\n                Active\r\n              </Radio>\r\n              <Radio\r\n                name=\"status\"\r\n                control={control}\r\n                checked={watchUserStatus === userStatus.PENDING}\r\n                value={userStatus.PENDING}\r\n              >\r\n                Pending\r\n              </Radio>\r\n              <Radio\r\n                name=\"status\"\r\n                control={control}\r\n                checked={watchUserStatus === userStatus.BANNED}\r\n                value={userStatus.BANNED}\r\n              >\r\n                Banned\r\n              </Radio>\r\n            </FieldCheckbox>\r\n          </Field>\r\n          <Field>\r\n            <Label>Role</Label>\r\n            <FieldCheckbox>\r\n              <Radio\r\n                name=\"role\"\r\n                control={control}\r\n                checked={watchUserRole === userRole.ADMIN}\r\n                value={userRole.ADMIN}\r\n              >\r\n                Admin\r\n              </Radio>\r\n              <Radio\r\n                name=\"role\"\r\n                control={control}\r\n                checked={watchUserRole === userRole.MOD}\r\n                value={userRole.MOD}\r\n              >\r\n                Moderator\r\n              </Radio>\r\n              <Radio\r\n                name=\"role\"\r\n                control={control}\r\n                checked={watchUserRole === userRole.USER}\r\n                value={userRole.USER}\r\n              >\r\n                User\r\n              </Radio>\r\n            </FieldCheckbox>\r\n          </Field>\r\n        </div>\r\n        <Button\r\n          kind=\"primary\"\r\n          type=\"submit\"\r\n          isLoading={isSubmitting}\r\n          disabled={isSubmitting}\r\n          className=\"mx-auto w-[200px]\"\r\n        >\r\n          Add new user\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserAddNew;\r\n"],"names":["checked","children","control","name","props","field","useController","defaultValue","type","className","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","userInfo","useAuth","useForm","mode","defaultValues","username","avatar","email","password","createdAt","Date","status","userStatus","role","userRole","reset","getValues","setValue","watch","handleSubmit","formState","isSubmitting","watchUserStatus","errors","Number","watchUserRole","useFirebaseImage","imageURL","progress","handleResetUploadAfterSubmit","handleRemoveImage","handleSelectImage","handleCreateNewUser","values","Swal","title","html","icon","showConfirmButton","confirmButtonText","confirmButtonColor","showCancelButton","cancelButtonColor","cancelButtonText","then","result","isConfirmed","createUserWithEmailAndPassword","auth","user","updateProfile","displayName","photoURL","addDoc","collection","db","serverTimestamp","userId","uid","usernameSlug","slugify","lower","iconColor","timer","toast","autoClose","console","log","dismiss","desc","onSubmit","onChange","scrollable","centeredCloseIcon","I","placeholder","value","kind","isLoading","disabled"],"sourceRoot":""}