{"version":3,"file":"static/js/453.6aa88868.chunk.js","mappings":"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","sources":["../node_modules/@firebase/storage/src/implementation/constants.ts","../node_modules/@firebase/storage/src/implementation/error.ts","../node_modules/@firebase/storage/src/implementation/location.ts","../node_modules/@firebase/storage/src/implementation/connection.ts","../node_modules/@firebase/storage/src/implementation/failrequest.ts","../node_modules/@firebase/storage/src/implementation/type.ts","../node_modules/@firebase/storage/src/implementation/url.ts","../node_modules/@firebase/storage/src/implementation/utils.ts","../node_modules/@firebase/storage/src/implementation/request.ts","../node_modules/@firebase/storage/src/implementation/backoff.ts","../node_modules/@firebase/storage/src/implementation/fs.ts","../node_modules/@firebase/storage/src/implementation/string.ts","../node_modules/@firebase/storage/src/platform/browser/base64.ts","../node_modules/@firebase/storage/src/implementation/blob.ts","../node_modules/@firebase/storage/src/implementation/json.ts","../node_modules/@firebase/storage/src/implementation/path.ts","../node_modules/@firebase/storage/src/implementation/metadata.ts","../node_modules/@firebase/storage/src/implementation/requestinfo.ts","../node_modules/@firebase/storage/src/implementation/requests.ts","../node_modules/@firebase/storage/src/implementation/taskenums.ts","../node_modules/@firebase/storage/src/implementation/observer.ts","../node_modules/@firebase/storage/src/implementation/async.ts","../node_modules/@firebase/storage/src/platform/browser/connection.ts","../node_modules/@firebase/storage/src/task.ts","../node_modules/@firebase/storage/src/reference.ts","../node_modules/@firebase/storage/src/service.ts","../node_modules/@firebase/storage/src/constants.ts","../node_modules/@firebase/storage/src/api.ts","../node_modules/@firebase/storage/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * 1 second\n */\nexport const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to StorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNode } from '@firebase/util';\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            (!hitServer ||\n              isRetryStatusCode(status, this.additionalRetryCodes_)) &&\n            this.retry\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError,\n  retryLimitExceeded\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\nimport { isRetryStatusCode } from './implementation/utils';\nimport { CompleteFn } from '@firebase/util';\nimport { DEFAULT_MIN_SLEEP_TIME_MILLIS } from './implementation/constants';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private pendingTimeout?: ReturnType<typeof setTimeout>;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  private sleepTime: number;\n\n  private maxSleepTime: number;\n\n  isExponentialBackoffExpired(): boolean {\n    return this.sleepTime > this.maxSleepTime;\n  }\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(\n              this.sleepTime * 2,\n              DEFAULT_MIN_SLEEP_TIME_MILLIS\n            );\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e as StorageError;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken,\n        /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null,\n    retry = true\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion,\n        retry\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport {\n  EmulatorMockTokenOptions,\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"],"names":["DEFAULT_HOST","StorageError","code","message","status_","prependCode","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","this","status","FirebaseError","unknown","retryLimitExceeded","canceled","cannotSliceBlob","invalidArgument","appDeleted","invalidFormat","format","internalError","ErrorCode","Location","bucket","path","path_","length","encode","encodeURIComponent","bucketString","host","bucketLocation","makeFromUrl","e","url","location","bucketDomain","gsRegex","RegExp","httpModify","loc","decodeURIComponent","firebaseStorageHost","replace","groups","regex","indices","postModify","charAt","slice","i","group","captures","exec","bucketValue","pathValue","invalidUrl","FailRequest","error","promise_","Promise","reject","isString","p","String","isNativeBlob","isNativeBlobDefined","Blob","isNode","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","resolve","resolve_","reject_","start_","backoffDone","requestWentThrough","connection","wasSuccessCode","result","getResponse","err","getErrorText","appDelete_","canceled_","RequestEndStatus","backoffId_","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","waitMillis","Math","random","stopped","stop","wasTimeout","start","backoffCallback","pendingConnection_","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","successCode","wasCanceled","ABORT","appDelete","abort","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","handler","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","undefined","bb","append","getBlob","StringFormat","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataUrl","parts","DataURLParts","base64","rest","decoded","percentEncodedBytes_","dataURLBytes_","b","c","charCodeAt","push","Uint8Array","hasMinus","hasUnder","hasPlus","hasSlash","bytes","atob","array","dataURL","matches","match","middle","s","end","substring","endsWith","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","sliced","blob","webkitSlice","mozSlice","sliceBlob","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","jsonObjectOrNull","obj","JSON","parse","Array","isArray","lastComponent","lastIndexOf","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","getMappings","mappings","nameMapping","_metadata","fullPath","xformPath","sizeMapping","Number","fromResource","service","resource","len","mapping","defineProperty","get","_makeStorageReference","addRef","fromResourceString","resourceString","toResourceString","stringify","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","downloadUrlHandler","tokens","split","token","alt","downloadUrlFromResourceString","_protocol","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata","fullServerUrl","maxOperationRetryTime","metadataForUpload_","metadataClone","determineContentType_","multipartUpload","bucketOnlyServerUrl","boundary","str","toString","genBoundary","metadata_","preBlobPart","postBlobPart","name","maxUploadRetryTime","uploadData","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","bytesLeft","bytesToUpload","min","uploadStatus","newCurrent","TaskState","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","next","observer","async","f","argsToForward","XhrConnection","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","sent_","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","UploadTask","ref","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_request","_chunkMultiplier","_codeEquals","_needToFetchStatus","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_error","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_resolve","_reject","_start","sizeBefore","_transferred","_updateProgress","_uploadUrl","_createResumable","_fetchStatus","_needToFetchMetadata","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","callback","all","_getAuthToken","_getAppCheckToken","_resolveToken","metadataForUpload","createResumableUpload","_location","createRequest","_makeRequest","getPromise","sizeString","isNaN","getResumableUploadStatus","statusRequest","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","metadataRequest","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","_addObserver","_removeObserver","onFulfilled","onRejected","_observers","_notifyObserver","splice","_finishPromise","triggered","fbsAsync","bind","snapshot","valid","Reference","_service","_newRef","newPath","parent","invalidRootOperation","getDownloadURL","_throwIfRoot","requestsGetDownloadUrl","makeRequestWithTokens","deleteObject","_xhr","_text","requestsDeleteObject","childPath","canonicalChildPath","filter","component","join","child","refFromPath","FirebaseStorageImpl","_bucket","reference","_getChild","serviceOrRef","pathOrUrl","test","extractBucket","config","makeFromBucketSpec","connectStorageEmulator","port","options","mockUserToken","_overrideAuthToken","createMockUserToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","_host","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","appCheck","_deleted","request","clear","_appId","add","delete","STORAGE_TYPE","uploadBytesResumable","uploadBytesResumableInternal","getModularInstance","getDownloadURLInternal","deleteObjectInternal","refInternal","getStorage","getApp","bucketUrl","storageProvider","_getProvider","storageInstance","identifier","emulator","getDefaultEmulatorHostnameAndPort","connectEmulatorInternal","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","_registerComponent","Component","setMultipleInstances","registerVersion","version"],"sourceRoot":""}