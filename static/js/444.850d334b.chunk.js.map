{"version":3,"file":"static/js/444.850d334b.chunk.js","mappings":"+QAgHA,UA7FqB,WACnB,IAAQA,GAASC,EAAAA,EAAAA,MAATD,KACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAG,eAArCC,EAAQ,KAAEC,EAAW,KAC5B,GAA8BF,EAAAA,EAAAA,YAAU,eAAjCG,EAAO,KAAEC,EAAU,KAC1B,GAA8BJ,EAAAA,EAAAA,WAAS,GAAM,eAAtCK,EAAO,KAAEC,EAAU,KAC1B,GAAwCN,EAAAA,EAAAA,UAAS,IAAG,eAA7CO,EAAY,KAAEC,EAAe,KAC9BC,EAAmB,yCAAG,6FAqB1B,OAnBMC,GAAYC,EAAAA,EAAAA,KAChBC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,UAEfC,EAAAA,EAAAA,IAAWX,GAAW,IACtBY,EAAAA,EAAAA,IAboB,MAgBtBC,EAAAA,EAAAA,IAAWN,GAAW,SAACO,GACrB,IAAIC,EAAU,GACdD,EAASE,KAAKC,SAAQ,SAACC,GACrBH,EAAQI,MAAK,QACXC,GAAIF,EAAIE,IACLF,EAAIG,QAEX,IACA,IAAMC,EAAsC,IAAlBR,EAASS,KACnCpB,EAAWmB,GACXvB,EAAY,GAAD,eAAKD,GAAaiB,GAC/B,IACA,UACgCS,EAAAA,EAAAA,IAAQjB,GAAW,KAAD,EAA5CkB,EAAiB,OAEjBC,EACJD,EAAkBT,KAAKS,EAAkBT,KAAKW,OAAS,GAEzD1B,EAAWyB,GAAa,2CACzB,kBA5BwB,mCA0DzB,OA7BAE,EAAAA,EAAAA,YAAU,WACe,aAyBtB,OAzBsB,0BAAvB,+FAKE,OAJMC,GAASpB,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,SACxBoB,EAAanC,GACfa,EAAAA,EAAAA,IAAMqB,GAAQE,EAAAA,EAAAA,IAAM,gBAAiB,KAAMpC,KAC3Ca,EAAAA,EAAAA,IAAMqB,GAAQjB,EAAAA,EAAAA,IAzCE,KA0CpB,UACgCY,EAAAA,EAAAA,IAAQM,GAAY,KAAD,EAA7CL,EAAiB,OAEjBC,EACJD,EAAkBT,KAAKS,EAAkBT,KAAKW,OAAS,IAGzDd,EAAAA,EAAAA,IAAWiB,EAAYD,GAAQ,SAACf,GAC9B,IAAIC,EAAU,GACdD,EAASE,KAAKC,SAAQ,SAACC,GACrBH,EAAQI,MAAK,QACXC,GAAIF,EAAIE,IACLF,EAAIG,QAEX,IACAhB,EAAgBV,GAChBI,EAAYgB,EACd,IAEAd,EAAWyB,GAAa,4CACzB,uBA1Bc,WACQ,wBA0BvBM,EACF,GAAG,CAACrC,IACCA,GAEH,SAAC,KAAM,WACL,iBAAKsC,UAAU,YAAW,WACxB,UAAC,KAAO,CAACA,UAAU,QAAO,qCACC7B,MAE3B,gBAAK6B,UAAU,0CAAyC,SACrDnC,EAAS6B,OAAS,GACjB7B,EAASoC,KAAI,SAACC,GAAI,OAChB,SAAC,IAAQ,CAAgBA,KAAMA,GAAZ,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMf,GAA2B,MAGpDlB,GAKA,SAAC,IAAgB,CACf+B,UAAU,qBACVG,KAAK,WACLC,MAAM,kBAPR,gBAAKJ,UAAU,QAAO,UACpB,SAAC,IAAM,CAACK,QAAShC,EAAoB,+BAf7B,SAAC,IAAY,GA2BjC,C","sources":["pages/CategoryPage.js"],"sourcesContent":["import { Button } from \"components/Button\";\r\nimport { Heading, Layout } from \"components/Layout\";\r\nimport { db } from \"firebase-app/firebase-config\";\r\nimport {\r\n  collection,\r\n  getDocs,\r\n  limit,\r\n  onSnapshot,\r\n  query,\r\n  startAfter,\r\n  where,\r\n} from \"firebase/firestore\";\r\nimport DashboardHeading from \"module/Category/DashboardHeading\";\r\nimport PostItem from \"module/Post/PostItem\";\r\nimport React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport NotFoundPage from \"./NotFoundPage\";\r\nconst ARTICLES_PER_PAGE = 12;\r\nconst CategoryPage = () => {\r\n  const { slug } = useParams();\r\n  const [postList, setPostList] = useState([]);\r\n  const [lastDoc, setLastDoc] = useState();\r\n  const [isEmpty, setIsEmpty] = useState(false);\r\n  const [categoryName, setCategoryName] = useState(\"\");\r\n  const handleLoadMorePosts = async () => {\r\n    // Ví dụ lastDoc (category cuối cùng) của page 1 là Gaming thì cái query này sẽ lấy ra tất cả thằng đằng sau thằng Gaming đó để hiển thị ra tiếp\r\n    const nextQuery = query(\r\n      collection(db, \"posts\"),\r\n      //   orderBy(\"name\", \"desc\"),\r\n      startAfter(lastDoc || 0),\r\n      limit(ARTICLES_PER_PAGE)\r\n    );\r\n    // Nhét query vào đây và setCategoryList là thông tin của page trước concat với page mới\r\n    onSnapshot(nextQuery, (snapshot) => {\r\n      let results = [];\r\n      snapshot.docs.forEach((doc) => {\r\n        results.push({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        });\r\n      });\r\n      const isCollectionEmpty = snapshot.size === 0;\r\n      setIsEmpty(isCollectionEmpty);\r\n      setPostList([...postList, ...results]);\r\n    });\r\n    // Ok giờ, lấy ra tất cả docs của page mới\r\n    const documentSnapshots = await getDocs(nextQuery);\r\n    // Lấy doc cuối cùng của page mới\r\n    const lastVisible =\r\n      documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n    // set cho state lastDoc = thông tin của thằng doc cuối cùng của page mới đó, rồi lại quay trở lại chạy vào useEffect\r\n    setLastDoc(lastVisible);\r\n  };\r\n  useEffect(() => {\r\n    async function getPosts() {\r\n      const colRef = collection(db, \"posts\");\r\n      const firstQuery = slug\r\n        ? query(colRef, where(\"category.slug\", \"==\", slug))\r\n        : query(colRef, limit(ARTICLES_PER_PAGE));\r\n      // Lấy ra toàn bộ docs\r\n      const documentSnapshots = await getDocs(firstQuery);\r\n      // Lấy ra thông tin của doc cuối cùng CỦA PAGE HIỆN TẠI\r\n      const lastVisible =\r\n        documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n      //  Hiển thị các docs lấy được ra màn hình\r\n      onSnapshot(firstQuery, colRef, (snapshot) => {\r\n        let results = [];\r\n        snapshot.docs.forEach((doc) => {\r\n          results.push({\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          });\r\n        });\r\n        setCategoryName(slug);\r\n        setPostList(results);\r\n      });\r\n      // Gán cái thằng lastVisible (thằng doc cuối cùng của page hiện tại) kia cho một state là lastDoc để xử lí sau này\r\n      setLastDoc(lastVisible);\r\n    }\r\n    getPosts();\r\n  }, [slug]);\r\n  if (!slug) return <NotFoundPage></NotFoundPage>;\r\n  return (\r\n    <Layout>\r\n      <div className=\"container\">\r\n        <Heading className=\"mt-10\">\r\n          Articles with category: {categoryName}\r\n        </Heading>\r\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-x-4\">\r\n          {postList.length > 0 &&\r\n            postList.map((post) => (\r\n              <PostItem key={post?.id} post={post}></PostItem>\r\n            ))}\r\n        </div>\r\n        {!isEmpty ? (\r\n          <div className=\"mt-10\">\r\n            <Button onClick={handleLoadMorePosts}>Load more</Button>\r\n          </div>\r\n        ) : (\r\n          <DashboardHeading\r\n            className=\"italic text-center\"\r\n            desc=\"The end.\"\r\n            title=\"No more data\"\r\n          ></DashboardHeading>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default CategoryPage;\r\n"],"names":["slug","useParams","useState","postList","setPostList","lastDoc","setLastDoc","isEmpty","setIsEmpty","categoryName","setCategoryName","handleLoadMorePosts","nextQuery","query","collection","db","startAfter","limit","onSnapshot","snapshot","results","docs","forEach","doc","push","id","data","isCollectionEmpty","size","getDocs","documentSnapshots","lastVisible","length","useEffect","colRef","firstQuery","where","getPosts","className","map","post","desc","title","onClick"],"sourceRoot":""}